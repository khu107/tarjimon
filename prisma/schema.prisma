generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ===== Enums =====

// 사용자 역할
enum Role {
  USER          // 일반 사용자
  INTERPRETER   // 통역사
  ADMIN         // 관리자
}

// 사용자 상태
enum UserStatus {
  ACTIVE        // 활성
  PENDING       // 대기 중
  SUSPENDED     // 정지
  DELETED       // 삭제됨 (soft delete)
}

// 인증 제공자 (로그인 방식)
enum AuthProvider {
  SMS           // SMS 인증
}

// 통역사 승인 상태
enum InterpreterStatus {
  PENDING_APPROVAL   // 관리자 승인 대기
  APPROVED           // 승인됨
  REJECTED           // 거절됨
}

// SMS 인증 목적
enum SmsVerificationPurpose {
  LOGIN           // 로그인
  PASSWORD_RESET  // 비밀번호 재설정
}

// 🆕 앱 언어
enum AppLanguage {
  UZ    // 우즈벡어
  RU    // 러시아어
  EN    // 영어
}


// ===== Models =====

model User {
  id            String       @id @default(uuid())
  role          Role         @default(USER)
  phone         String?      @unique
  authProvider  AuthProvider
  status        UserStatus   @default(PENDING)
  tokenVersion  Int          @default(0)
  appLanguage   AppLanguage  @default(EN)  
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?    // soft delete용

  // Relations
  userProfile   UserProfile?  // 1:1 관계
  interpreter   Interpreter?  // 1:1 관계
  refreshTokens RefreshToken[]

  @@map("users")
}

model UserProfile {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  avatarUrl   String?
  nationality String?
  preferences Json?     // 사용자 설정 (언어, 알림 등)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("user_profiles")
}

model SmsVerification {
  id          String                    @id @default(uuid())
  phone       String
  code        String                    // 6자리 인증 코드
  purpose     SmsVerificationPurpose    @default(LOGIN)
  expiresAt   DateTime
  createdAt   DateTime                  @default(now())

  @@map("sms_verifications")
}

model RefreshToken {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String    @unique  // 해시된 토큰
  expiresAt   DateTime
  deviceInfo  String?
  ipAddress   String?
  isRevoked   Boolean   @default(false)
  createdAt   DateTime  @default(now())

  @@map("refresh_tokens")
}

// ===== Interpreter Models =====

// 마스터 데이터: 언어 (다국어 지원)
model Language {
  id          String    @id @default(uuid())
  code        String    @unique  // "ko", "en", "uz"
  nameUz      String   
  nameRu      String    
  nameEn      String    
  
  interpreters InterpreterLanguage[]
  @@map("languages")
}

// 중간 테이블: 통역사 - 언어 (다대다)
model InterpreterLanguage {
  id              String    @id @default(uuid())
  interpreterId   String
  interpreter     Interpreter @relation(fields: [interpreterId], references: [id], onDelete: Cascade)
  languageId      String
  language        Language  @relation(fields: [languageId], references: [id])
  
  @@unique([interpreterId, languageId])
  @@map("interpreter_languages")
}

// 마스터 데이터: 전문분야 (다국어 지원)
model Specialization {
  id          String    @id @default(uuid())
  nameUz      String    
  nameRu      String    
  nameEn      String    
  
  interpreters InterpreterSpecialization[]
  @@map("specializations")
}

// 중간 테이블: 통역사 - 전문분야 (다대다)
model InterpreterSpecialization {
  id              String    @id @default(uuid())
  interpreterId   String
  interpreter     Interpreter @relation(fields: [interpreterId], references: [id], onDelete: Cascade)
  specializationId String
  specialization  Specialization @relation(fields: [specializationId], references: [id])
  
  @@unique([interpreterId, specializationId])
  @@map("interpreter_specializations")
}

// 자격증 (1:N 관계)
model Certification {
  id              String    @id @default(uuid())
  interpreterId   String
  interpreter     Interpreter @relation(fields: [interpreterId], references: [id], onDelete: Cascade)
  name            String
  issuer          String?
  issueDate       DateTime
  expiryDate      DateTime?
  documentUrl     String?
  
  createdAt       DateTime  @default(now())
  @@map("certifications")
}

// 통역사 프로필
model Interpreter {
  id                String    @id @default(uuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name              String?
  bio               String?   @db.Text
  avatarUrl         String?
  nationality       String?
  yearsOfExperience Int?
  currentLocation   String?
  
  status            InterpreterStatus @default(PENDING_APPROVAL)
  onlineStatus      Boolean   @default(false)
  
  averageRating     Float?    @default(0)
  totalReviews      Int       @default(0)
  
  // Relations (다대다)
  languages         InterpreterLanguage[]
  specializations   InterpreterSpecialization[]
  certifications    Certification[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  @@map("interpreters")
}